
import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  ScrollView,
  Image,
  Platform,
  Alert,
  Share
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { Stack, useLocalSearchParams, useRouter } from 'expo-router';
import { IconSymbol } from '@/components/IconSymbol';
import { colors, commonStyles } from '@/styles/commonStyles';
import { pestsAndDiseases } from '@/data/zimbabweData';

export default function PestResultsScreen() {
  const router = useRouter();
  const params = useLocalSearchParams();
  const [activeTab, setActiveTab] = useState<'overview' | 'treatment' | 'prevention'>('overview');
  const [feedbackGiven, setFeedbackGiven] = useState(false);

  const pestId = params.pestId as string;
  const confidence = parseFloat(params.confidence as string);
  const severity = params.severity as string;
  const imageUri = params.imageUri as string;

  const pestData = pestsAndDiseases.find(pest => pest.id === pestId);

  if (!pestData) {
    return (
      <SafeAreaView style={[commonStyles.safeArea, { backgroundColor: colors.background }]}>
        <View style={styles.errorContainer}>
          <Text style={commonStyles.title}>Pest data not found</Text>
        </View>
      </SafeAreaView>
    );
  }

  const renderHeaderRight = () => (
    <TouchableOpacity
      onPress={shareResults}
      style={styles.headerButton}
    >
      <IconSymbol name="square.and.arrow.up" color={colors.text} size={20} />
    </TouchableOpacity>
  );

  const shareResults = async () => {
    try {
      const message = `Pest Identification Result:\n\n` +
        `Identified: ${pestData.name}\n` +
        `Confidence: ${Math.round(confidence * 100)}%\n` +
        `Severity: ${severity.toUpperCase()}\n\n` +
        `Immediate Actions:\n` +
        `• ${pestData.treatments.organic[0]?.method || 'Apply organic treatment'}\n` +
        `• Monitor field regularly\n\n` +
        `Generated by ZimFarm Pro`;

      await Share.share({
        message,
        title: 'Pest Identification Results'
      });
    } catch (error) {
      console.log('Error sharing:', error);
    }
  };

  const provideFeedback = (isAccurate: boolean) => {
    setFeedbackGiven(true);
    const message = isAccurate 
      ? 'Thank you for confirming the identification accuracy!'
      : 'Thank you for your feedback. This helps improve our AI model.';
    
    Alert.alert('Feedback Received', message);
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'high': return colors.error;
      case 'medium': return colors.warning;
      case 'low': return colors.success;
      default: return colors.textSecondary;
    }
  };

  const renderOverview = () => (
    <View style={styles.tabContent}>
      {/* Identification Summary */}
      <View style={[commonStyles.card, styles.summaryCard]}>
        <View style={styles.summaryHeader}>
          <View style={styles.summaryInfo}>
            <Text style={[commonStyles.title, styles.pestName]}>{pestData.name}</Text>
            <Text style={commonStyles.textSecondary}>{pestData.scientificName}</Text>
            <Text style={[commonStyles.text, styles.pestType]}>
              Type: {pestData.type.charAt(0).toUpperCase() + pestData.type.slice(1)}
            </Text>
          </View>
          <View style={styles.confidenceContainer}>
            <Text style={styles.confidenceLabel}>Confidence</Text>
            <Text style={[styles.confidenceValue, { color: colors.primary }]}>
              {Math.round(confidence * 100)}%
            </Text>
          </View>
        </View>

        <View style={styles.severityContainer}>
          <Text style={styles.severityLabel}>Threat Level:</Text>
          <View style={[styles.severityBadge, { backgroundColor: getSeverityColor(severity) }]}>
            <Text style={styles.severityText}>{severity.toUpperCase()}</Text>
          </View>
        </View>
      </View>

      {/* Description */}
      <View style={[commonStyles.card, styles.descriptionCard]}>
        <Text style={[commonStyles.subtitle, styles.sectionTitle]}>Description</Text>
        <Text style={commonStyles.text}>{pestData.description}</Text>
      </View>

      {/* Affected Crops */}
      <View style={[commonStyles.card, styles.cropsCard]}>
        <Text style={[commonStyles.subtitle, styles.sectionTitle]}>Commonly Affected Crops</Text>
        <View style={styles.cropsContainer}>
          {pestData.affectedCrops.map((crop, index) => (
            <View key={index} style={styles.cropTag}>
              <Text style={styles.cropTagText}>{crop}</Text>
            </View>
          ))}
        </View>
      </View>

      {/* Symptoms */}
      <View style={[commonStyles.card, styles.symptomsCard]}>
        <Text style={[commonStyles.subtitle, styles.sectionTitle]}>Symptoms to Look For</Text>
        {pestData.symptoms.map((symptom, index) => (
          <View key={index} style={styles.symptomItem}>
            <IconSymbol name="exclamationmark.circle" size={16} color={colors.warning} />
            <Text style={styles.symptomText}>{symptom}</Text>
          </View>
        ))}
      </View>

      {/* Identification Features */}
      <View style={[commonStyles.card, styles.featuresCard]}>
        <Text style={[commonStyles.subtitle, styles.sectionTitle]}>Key Identification Features</Text>
        {pestData.identificationFeatures.map((feature, index) => (
          <View key={index} style={styles.featureItem}>
            <IconSymbol name="eye" size={16} color={colors.primary} />
            <Text style={styles.featureText}>{feature}</Text>
          </View>
        ))}
      </View>
    </View>
  );

  const renderTreatment = () => (
    <View style={styles.tabContent}>
      {/* Organic Treatments */}
      <View style={[commonStyles.card, styles.treatmentCard]}>
        <View style={styles.treatmentHeader}>
          <IconSymbol name="leaf" size={24} color={colors.success} />
          <Text style={[commonStyles.subtitle, styles.treatmentTitle]}>Organic Treatments</Text>
        </View>
        {pestData.treatments.organic.map((treatment, index) => (
          <View key={index} style={styles.treatmentItem}>
            <Text style={styles.treatmentMethod}>{treatment.method}</Text>
            <View style={styles.treatmentDetails}>
              <Text style={styles.treatmentDetail}>
                <Text style={styles.treatmentLabel}>Dosage: </Text>
                {treatment.dosage}
              </Text>
              <Text style={styles.treatmentDetail}>
                <Text style={styles.treatmentLabel}>Application: </Text>
                {treatment.application}
              </Text>
              <Text style={styles.treatmentDetail}>
                <Text style={styles.treatmentLabel}>Frequency: </Text>
                {treatment.frequency}
              </Text>
            </View>
          </View>
        ))}
      </View>

      {/* Chemical Treatments */}
      {pestData.treatments.chemical.length > 0 && (
        <View style={[commonStyles.card, styles.treatmentCard]}>
          <View style={styles.treatmentHeader}>
            <IconSymbol name="flask" size={24} color={colors.warning} />
            <Text style={[commonStyles.subtitle, styles.treatmentTitle]}>Chemical Treatments</Text>
          </View>
          {pestData.treatments.chemical.map((treatment, index) => (
            <View key={index} style={styles.treatmentItem}>
              <Text style={styles.treatmentMethod}>{treatment.product}</Text>
              <View style={styles.treatmentDetails}>
                <Text style={styles.treatmentDetail}>
                  <Text style={styles.treatmentLabel}>Dosage: </Text>
                  {treatment.dosage}
                </Text>
                <Text style={styles.treatmentDetail}>
                  <Text style={styles.treatmentLabel}>Application: </Text>
                  {treatment.application}
                </Text>
                <Text style={styles.treatmentDetail}>
                  <Text style={styles.treatmentLabel}>Frequency: </Text>
                  {treatment.frequency}
                </Text>
                {treatment.safetyPeriod && (
                  <Text style={[styles.treatmentDetail, styles.safetyWarning]}>
                    <Text style={styles.treatmentLabel}>Safety Period: </Text>
                    {treatment.safetyPeriod}
                  </Text>
                )}
              </View>
            </View>
          ))}
          
          <View style={styles.warningBox}>
            <IconSymbol name="exclamationmark.triangle.fill" size={20} color={colors.error} />
            <Text style={styles.warningText}>
              Always follow label instructions and safety precautions when using chemical treatments.
            </Text>
          </View>
        </View>
      )}

      {/* Cultural Practices */}
      <View style={[commonStyles.card, styles.treatmentCard]}>
        <View style={styles.treatmentHeader}>
          <IconSymbol name="person.crop.circle" size={24} color={colors.primary} />
          <Text style={[commonStyles.subtitle, styles.treatmentTitle]}>Cultural Practices</Text>
        </View>
        {pestData.treatments.cultural.map((practice, index) => (
          <View key={index} style={styles.practiceItem}>
            <IconSymbol name="checkmark.circle" size={16} color={colors.success} />
            <Text style={styles.practiceText}>{practice}</Text>
          </View>
        ))}
      </View>
    </View>
  );

  const renderPrevention = () => (
    <View style={styles.tabContent}>
      <View style={[commonStyles.card, styles.preventionCard]}>
        <View style={styles.preventionHeader}>
          <IconSymbol name="shield.checkered" size={24} color={colors.primary} />
          <Text style={[commonStyles.subtitle, styles.preventionTitle]}>Prevention Strategies</Text>
        </View>
        <Text style={commonStyles.textSecondary}>
          Implementing these preventive measures can help reduce the risk of future infestations:
        </Text>
        
        {pestData.prevention.map((measure, index) => (
          <View key={index} style={styles.preventionItem}>
            <IconSymbol name="checkmark.shield" size={16} color={colors.success} />
            <Text style={styles.preventionText}>{measure}</Text>
          </View>
        ))}
      </View>

      {/* Best Practices */}
      <View style={[commonStyles.card, styles.bestPracticesCard]}>
        <Text style={[commonStyles.subtitle, styles.sectionTitle]}>General Best Practices</Text>
        
        <View style={styles.practiceCategory}>
          <Text style={styles.practiceCategoryTitle}>Field Monitoring</Text>
          <Text style={styles.practiceCategoryText}>
            • Inspect crops weekly during growing season{'\n'}
            • Check undersides of leaves{'\n'}
            • Monitor during early morning hours{'\n'}
            • Keep records of pest activity
          </Text>
        </View>

        <View style={styles.practiceCategory}>
          <Text style={styles.practiceCategoryTitle}>Integrated Pest Management</Text>
          <Text style={styles.practiceCategoryText}>
            • Combine multiple control methods{'\n'}
            • Rotate between different treatments{'\n'}
            • Preserve beneficial insects{'\n'}
            • Use economic thresholds for decisions
          </Text>
        </View>

        <View style={styles.practiceCategory}>
          <Text style={styles.practiceCategoryTitle}>Environmental Considerations</Text>
          <Text style={styles.practiceCategoryText}>
            • Apply treatments during calm weather{'\n'}
            • Avoid spraying during flowering{'\n'}
            • Protect water sources{'\n'}
            • Follow local regulations
          </Text>
        </View>
      </View>
    </View>
  );

  return (
    <SafeAreaView style={[commonStyles.safeArea, { backgroundColor: colors.background }]}>
      {Platform.OS === 'ios' && (
        <Stack.Screen
          options={{
            title: "Identification Results",
            headerStyle: { backgroundColor: colors.background },
            headerTintColor: colors.text,
            headerRight: renderHeaderRight,
          }}
        />
      )}

      <ScrollView 
        style={styles.container}
        contentContainerStyle={styles.contentContainer}
        showsVerticalScrollIndicator={false}
      >
        {/* Image */}
        {imageUri && (
          <View style={styles.imageContainer}>
            <Image source={{ uri: imageUri }} style={styles.resultImage} />
          </View>
        )}

        {/* Tab Navigation */}
        <View style={styles.tabNavigation}>
          <TouchableOpacity
            style={[styles.tab, activeTab === 'overview' && styles.activeTab]}
            onPress={() => setActiveTab('overview')}
          >
            <Text style={[styles.tabText, activeTab === 'overview' && styles.activeTabText]}>
              Overview
            </Text>
          </TouchableOpacity>
          <TouchableOpacity
            style={[styles.tab, activeTab === 'treatment' && styles.activeTab]}
            onPress={() => setActiveTab('treatment')}
          >
            <Text style={[styles.tabText, activeTab === 'treatment' && styles.activeTabText]}>
              Treatment
            </Text>
          </TouchableOpacity>
          <TouchableOpacity
            style={[styles.tab, activeTab === 'prevention' && styles.activeTab]}
            onPress={() => setActiveTab('prevention')}
          >
            <Text style={[styles.tabText, activeTab === 'prevention' && styles.activeTabText]}>
              Prevention
            </Text>
          </TouchableOpacity>
        </View>

        {/* Tab Content */}
        {activeTab === 'overview' && renderOverview()}
        {activeTab === 'treatment' && renderTreatment()}
        {activeTab === 'prevention' && renderPrevention()}

        {/* Feedback Section */}
        {!feedbackGiven && (
          <View style={[commonStyles.card, styles.feedbackCard]}>
            <Text style={[commonStyles.subtitle, styles.feedbackTitle]}>
              Was this identification accurate?
            </Text>
            <Text style={commonStyles.textSecondary}>
              Your feedback helps improve our AI model
            </Text>
            <View style={styles.feedbackButtons}>
              <TouchableOpacity
                style={[styles.feedbackButton, styles.feedbackYes]}
                onPress={() => provideFeedback(true)}
              >
                <IconSymbol name="hand.thumbsup" size={20} color={colors.card} />
                <Text style={styles.feedbackButtonText}>Yes, Accurate</Text>
              </TouchableOpacity>
              <TouchableOpacity
                style={[styles.feedbackButton, styles.feedbackNo]}
                onPress={() => provideFeedback(false)}
              >
                <IconSymbol name="hand.thumbsdown" size={20} color={colors.card} />
                <Text style={styles.feedbackButtonText}>Not Accurate</Text>
              </TouchableOpacity>
            </View>
          </View>
        )}

        <View style={styles.bottomSpacing} />
      </ScrollView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: colors.background,
  },
  contentContainer: {
    padding: 16,
  },
  errorContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  headerButton: {
    padding: 8,
    borderRadius: 8,
    backgroundColor: colors.card,
  },
  imageContainer: {
    marginBottom: 16,
    borderRadius: 12,
    overflow: 'hidden',
  },
  resultImage: {
    width: '100%',
    height: 200,
    borderRadius: 12,
  },
  tabNavigation: {
    flexDirection: 'row',
    backgroundColor: colors.card,
    borderRadius: 8,
    padding: 4,
    marginBottom: 16,
  },
  tab: {
    flex: 1,
    paddingVertical: 12,
    alignItems: 'center',
    borderRadius: 6,
  },
  activeTab: {
    backgroundColor: colors.primary,
  },
  tabText: {
    fontSize: 14,
    fontWeight: '500',
    color: colors.textSecondary,
  },
  activeTabText: {
    color: colors.card,
  },
  tabContent: {
    gap: 16,
  },
  summaryCard: {
    backgroundColor: colors.highlight,
  },
  summaryHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: 16,
  },
  summaryInfo: {
    flex: 1,
  },
  pestName: {
    marginBottom: 4,
  },
  pestType: {
    marginTop: 8,
    fontWeight: '500',
  },
  confidenceContainer: {
    alignItems: 'center',
    backgroundColor: colors.card,
    padding: 12,
    borderRadius: 8,
  },
  confidenceLabel: {
    fontSize: 12,
    color: colors.textSecondary,
    marginBottom: 4,
  },
  confidenceValue: {
    fontSize: 20,
    fontWeight: 'bold',
  },
  severityContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  severityLabel: {
    fontSize: 16,
    fontWeight: '500',
    color: colors.text,
    marginRight: 12,
  },
  severityBadge: {
    paddingHorizontal: 12,
    paddingVertical: 4,
    borderRadius: 12,
  },
  severityText: {
    color: colors.card,
    fontSize: 12,
    fontWeight: '600',
  },
  descriptionCard: {
    backgroundColor: colors.card,
  },
  sectionTitle: {
    marginBottom: 12,
  },
  cropsCard: {
    backgroundColor: colors.card,
  },
  cropsContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 8,
  },
  cropTag: {
    backgroundColor: colors.primary,
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 16,
  },
  cropTagText: {
    color: colors.card,
    fontSize: 12,
    fontWeight: '500',
  },
  symptomsCard: {
    backgroundColor: colors.card,
  },
  symptomItem: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    marginBottom: 8,
  },
  symptomText: {
    flex: 1,
    marginLeft: 8,
    color: colors.text,
    lineHeight: 20,
  },
  featuresCard: {
    backgroundColor: colors.card,
  },
  featureItem: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    marginBottom: 8,
  },
  featureText: {
    flex: 1,
    marginLeft: 8,
    color: colors.text,
    lineHeight: 20,
  },
  treatmentCard: {
    backgroundColor: colors.card,
  },
  treatmentHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 16,
  },
  treatmentTitle: {
    marginLeft: 8,
  },
  treatmentItem: {
    marginBottom: 16,
    paddingBottom: 16,
    borderBottomWidth: 1,
    borderBottomColor: colors.secondary,
  },
  treatmentMethod: {
    fontSize: 16,
    fontWeight: '600',
    color: colors.text,
    marginBottom: 8,
  },
  treatmentDetails: {
    gap: 4,
  },
  treatmentDetail: {
    fontSize: 14,
    color: colors.text,
    lineHeight: 20,
  },
  treatmentLabel: {
    fontWeight: '600',
  },
  safetyWarning: {
    color: colors.error,
    fontWeight: '500',
  },
  warningBox: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    backgroundColor: colors.highlight,
    padding: 12,
    borderRadius: 8,
    marginTop: 16,
  },
  warningText: {
    flex: 1,
    marginLeft: 8,
    color: colors.text,
    fontSize: 14,
    lineHeight: 20,
  },
  practiceItem: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    marginBottom: 8,
  },
  practiceText: {
    flex: 1,
    marginLeft: 8,
    color: colors.text,
    lineHeight: 20,
  },
  preventionCard: {
    backgroundColor: colors.card,
  },
  preventionHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 12,
  },
  preventionTitle: {
    marginLeft: 8,
  },
  preventionItem: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    marginBottom: 8,
    marginTop: 8,
  },
  preventionText: {
    flex: 1,
    marginLeft: 8,
    color: colors.text,
    lineHeight: 20,
  },
  bestPracticesCard: {
    backgroundColor: colors.card,
  },
  practiceCategory: {
    marginBottom: 16,
  },
  practiceCategoryTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: colors.text,
    marginBottom: 8,
  },
  practiceCategoryText: {
    fontSize: 14,
    color: colors.text,
    lineHeight: 20,
  },
  feedbackCard: {
    backgroundColor: colors.highlight,
    marginTop: 16,
  },
  feedbackTitle: {
    marginBottom: 8,
  },
  feedbackButtons: {
    flexDirection: 'row',
    gap: 12,
    marginTop: 16,
  },
  feedbackButton: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 12,
    borderRadius: 8,
  },
  feedbackYes: {
    backgroundColor: colors.success,
  },
  feedbackNo: {
    backgroundColor: colors.error,
  },
  feedbackButtonText: {
    color: colors.card,
    fontSize: 14,
    fontWeight: '600',
    marginLeft: 8,
  },
  bottomSpacing: {
    height: Platform.OS === 'ios' ? 20 : 100,
  },
});
